Ques. wise solution in top to bottom wise.


//find the union and intersection of two sorted array

#include<bits/stdc++.h>
using namespace std;

void findunion(int arr1[],int arr2[],int m,int n ){
  int i=0,j=0;

    while(i<m && j<n){
      if(arr1[i]<arr2[j])
        cout<<arr1[i++]<<" ";

      else if(arr2[j]<arr1[i])
        cout<<arr2[j++]<<" ";
      else{
      cout<<arr1[i++]<<" ";
      j++;
      }

    }

    while(i<m)
    cout<<arr1[i++]<<" ";

    while(j<n)
    cout<<arr2[j++]<<" " ;
}

void findinsertion(int arr1[],int arr2[], int m, int n){
  int i=0,j=0;
  while(i<m && j<n){
    if(arr1[i]<arr2[j])
      i++;
    else if(arr2[j]<arr1[i])
      j++;
    else{
      cout<<arr1[i++];
      j++;
    }
  }
}

int main(){
   int m,n;
   cin>>m>>n;
   int *arr1=new int[m];
   int *arr2=new int[n];
   
   cout<<"array 1 elements"<<endl;
   for(int i=0;i<m;i++)
    cin>>arr1[i];

    cout<<"array 2 elements"<<endl;
  for(int i=0;i<n;i++)
    cin>>arr2[i];
  
  sort(arr1,arr1+m);
  // for(int i=0;i<m;i++)
  // cout<<arr1[i];
  sort(arr2,arr2+n);

  cout<<"for union :"<<endl;
  findunion(arr1,arr2,m,n);

  cout<<endl<<"for insertion :"<<endl;
  findinsertion(arr1,arr2,m,n);

  return 0;

}












//program to cyclically rotate an array by one

#include<bits/stdc++.h>
using namespace std;

void rotate(int arr[], int n){
  int temp=arr[n-1];
  for(int i=n-1;i>0;i--)
    arr[i]=arr[i-1];
    arr[0]=temp;

}

int main(){
  int n;
  cin>>n;
  int *arr=new int(n);
  for(int i=0;i<n;i++)
  cin>>arr[i];

  cout << "Given array is \n"; 
    for (int i = 0; i < n; i++) 
        cout << arr[i]; 

  rotate(arr,n);
  
  cout << "\nRotated array is\n"; 
    for (int i = 0; i < n; i++) 
        cout << arr[i];
  return 0;
}














//finding the missing number in an array for a given range

#include<bits/stdc++.h>
using namespace std;

int MissingNo(int arr[],int n){
  int total=(n+1)*(n+2)/2;
  for(int i=0;i<n;i++)
  total-=arr[i];

  return total;
}
int main(){
  int n;
  cin>>n;

  int *arr=new int(n);
  for(int i=0;i<n;i++)
  cin>>arr[i];

  int res=MissingNo(arr,n);
  cout<<res;

  return 0;
}
















// find all pairs on integer array whose sum is equal to given no.

#include<bits/stdc++.h>
using namespace std;

 void PrintPairs_n2_method(int arr[],int n,int sum){
   for(int i=0;i<n;i++){
     for(int j=i+1;j<n;j++)
      if(arr[i]+arr[j]==sum)
      cout<<"("<<arr[i]<<","<<arr[j]<<"),"<<endl;
   }
 }

 void PrintPairs_n_hasing(int arr[],int n,int sum){
   int h[sum];
   memset(h,0,sizeof(h));

   for(int i=0;i<n;i++){
     if(h[sum-arr[i]]!=0)
      cout<<"("<<arr[i]<<","<<sum-arr[i]<<"),"<<endl;

      h[arr[i]]++;
   }
 }

 //this function is valid only for sorted array
 void printPairs_n_method3(int arr[],int n,int sum){
   int low=0;
   int high=n-1;
   while(low<high){
     if(arr[low]+arr[high]==sum)
      cout<<"("<<arr[low++]<<","<<arr[high--]<<"),"<<endl;
     
     if(arr[low]+arr[high]>sum)
     high--;
     else
     low++;

   }
 }


int main(){
  int n;
  cin>>n;

  int *arr=new int(n);
  for(int i=0;i<n;i++)
  cin>>arr[i];

  cout<<"Enter the sum  ";
  int sum;
  cin>>sum;

  // PrintPairs_n2_method(arr,n,sum);
  // PrintPairs_n_hasing(arr,n,sum);
  // printPairs_n_method3(arr,n,sum);
}











//find duplicates in an array

//different compiler pe run kro
#include<bits/stdc++.h>
using namespace std;

void find_duplicates(int arr[],int n){
  int h[100];
  memset(h,0,sizeof(h));
  for(int i=0;i<n;i++){
    h[arr[i]]++;
  }
  for(int i=0;i<n;i++){
    if(h[i]>1)
    cout<<i<<" ";
  }  
}

void print_duplicates(int arr[],int n){
  

  for(int i=0;i<n;i++){
    arr[arr[i]%n]+=n;
  }

  for(int i=0;i<n;i++){
    if(arr[i]/n>1)
    cout<<i<<" ";
  }
}

int main(){
  int n;
  cin>>n;
  int *arr=new int(n);
  for(int i=0;i<n;i++)
  cin>>arr[i];

  // find_duplicates(arr,n);
  print_duplicates(arr,n);

  return 0;
}






//implement quick sort algorithm

#include <bits/stdc++.h>
using namespace std;

//int partition(int *arr,int start,int end) use kr skte ha
int partition(int arr[],int start,int end){
  int pivot=arr[end];
  int partition_index=start;

  for(int i=start;i<end;i++){
    if(arr[i]<=pivot){
      swap(arr[i],arr[partition_index]);
      partition_index++;
    }
  }
  swap(arr[partition_index],arr[end]);

  return partition_index;
}


void quick_Sort(int arr[], int start,int end){
  if(start<end){
    int loc=partition(arr,start,end);

    quick_Sort(arr,start,loc-1);
    quick_Sort(arr,loc+1,end);
  }
}

int main(){
int n;
cin>>n;
 int *arr=new int(n);
 for(int i=0;i<n;i++)  cin>>arr[i];

 quick_Sort(arr,0,n-1);

for(int i=0;i<n;i++)
cout<<arr[i]<<" ";

  return 0;
}







//Finding common elements in three sorted arrays

#include<bits/stdc++.h>
using namespace std;

void findCommon(int arr1[],int arr2[],int arr3[],int n1,int n2,int n3){
  int i=0,j=0,k=0;

  while(i<n1 && j<n2 && k<n3){
    if(arr1[i]==arr2[j] && arr2[j]==arr3[k]){
    cout<<endl<<arr1[i]<<" ";
    i++;j++;k++;
    }
    else if(arr1[i]<arr2[j])
    i++;
    else if(arr2[j]<arr3[k])
    j++;
    else 
    k++;
  }

}

int main()
{
  int n1,n2,n3;
  cin>>n1>>n2>>n3;

  int *arr1=new int[n1];
  int *arr2=new int[n2];
  int *arr3=new int[n3];

  cout<<"enter array 1 elements"<<endl;
  for(int i=0;i<n1;i++) cin>>arr1[i];
  cout<<"enter array 2 elements"<<endl;
  for(int i=0;i<n2;i++) cin>>arr2[i];
  cout<<"enter array 3 elements"<<endl;
  for(int i=0;i<n3;i++) cin>>arr3[i];

  sort(arr1,arr1+n1);
  sort(arr2,arr2+n2);
  sort(arr3,arr3+n3);

  findCommon(arr1,arr2,arr3,n1,n2,n3);

  return 0;
}









//find the first repeating elements in an array of integers

#include<bits/stdc++.h>
using namespace std;
void printFirstRepeating(int arr[],int n){
  int min=-1;
  set<int> myset;

  for(int i=n-1;i>=0;i--){
    if(myset.find(arr[i])!=myset.end())
    min=i;
    else 
    myset.insert(arr[i]);

  }

  if(min !=-1)
  cout<<arr[min];
  else
  cout<<"no duplicates available";
}

int main(){
  int arr[] = {10, 5, 3, 4, 3, 5, 6}; 
  
    int n = sizeof(arr) / sizeof(arr[0]); 

  printFirstRepeating(arr,n);

  return 0;
}











//find the first non repeating elements in a given array of integer

#include<bits/stdc++.h>
using namespace std;

int firstNonRepeating(int arr[],int n){
  unordered_map<int , int> mp;

  for(int i=0;i<n;i++){
    mp[arr[i]]++;
  }

  for(int i=0;i<n;i++){
    if(mp[arr[i]]==1)
        return arr[i];
  }
  return -1; 
}
int main(){
  int arr[]={-1,2,-1,3,2};
  int n=sizeof(arr)/sizeof(arr[0]);

  cout<<firstNonRepeating(arr,n);
}







//given an array wit all distincts elements,find the largest three elements expected time complexity is O(n) and extra space is O(1)

#include<bits/stdc++.h>
using namespace std;

void largest3(int arr[],int n){
  int first,second ,third;

  if(n<3)
  cout<<"Invalid inputs";

  first=second=third=INT_MIN;
  for(int i=0;i<n;i++){

    if(arr[i]>first){
      third=second;
      second=first;
      first=arr[i];
    }

    else if(arr[i]>second){
      third=second;
      second=arr[i];
    }
    else if(arr[i]>third)
    third=arr[i];
  }
  cout<<first<<" "<<second<<" "<<third;
}

int main(){
  int arr[]={10,4,3,50,23,90};
  int n=sizeof(arr)/sizeof(arr[0]);

  largest3(arr,n);
}









//rearrange the array in alternating positive and negative items with O(1) extra space

#include<bits/stdc++.h>
using namespace std;

void rearrange(int arr[],int n){
  int i=0;
  int j=n-1;

  while(i<j){
    while(i<n && arr[i]>0) i++;

    while(j>=0 && arr[j]<0) j--;

    if(i<j)
    swap(arr[i],arr[j]);
  }

  if(i==0 || i==n)
  return;

  int k=0;
  while(k<n && i<n){
    swap(arr[k],arr[i]);
    i++;
    k+=2;
  }
}
int main(){
  int n;
  cin>>n;
  int *arr=new int(n);

  for(int i=0;i<n;i++)  cin>>arr[i];

  rearrange(arr,n);

  for(int i=0;i<n;i++)
  cout<<endl<<arr[i]<<" ";

  return 0;
}








//find if there is any sub array with sum equal to zero

#include<bits/stdc++.h>
using namespace std;

bool subarraySum(int arr[],int n){
  unordered_set<int> sumset;
  int sum=0;
  for(int i=0;i<n;i++){
    sum+=arr[i];

    if(sum==0 || sumset.find(sum)!=sumset.end())
      return true;
    
    sumset.insert(sum);
  }
  return false;
}

int main(){
  int n;
  cin>>n;

  int arr[n];
  for(int i=0;i<n;i++)  cin>>arr[i];

  if(subarraySum(arr,n))
    cout<<"true";
  else
    cout<<"False";

    return 0;
}












//find the largest sum contigious subarray
//Kadenes Algorithm

#include<bits/stdc++.h>
using namespace std;

//n^2 complexity O(1) space complexity , we use prefixsum array in which it adds previous array index values
void solve_n2(int arr[],int n){
  int pre[n+1];
  pre[0]=0;
  for(int i=1;i<=n;i++)
  pre[i]=pre[i-1]+arr[i];

  int mx=INT_MIN;
  for(int i=1;i<=n;i++){
    for(int j=i;j<=n;j++){
      int sum=pre[j]-pre[i-1];

      if(sum>mx)
      mx=sum;
    }
  }
  cout<<mx;
}


//time complexity O(n) space O(1) Kadane's Algorithm
void kadane_alo(int arr[],int n){
  int max=INT_MIN;
  int max_Till_Here=0;

  for(int i=1;i<=n;i++){
    max_Till_Here+=arr[i];

    if(max<max_Till_Here)
    max=max_Till_Here;

    if(max_Till_Here<0)
    max_Till_Here=0;
  }
  cout<<max;
}


int main(){
  int n;
  cin>>n;
  int arr[n+1];

  for(int i=1;i<=n;i++)  cin>>arr[i];

  //solve_n2(arr,n);
  kadane_alo(arr,n);

  return 0;
}








//find a factorial of a large number

#include<bits/stdc++.h>
using namespace std;

int main(){
  int n;
  cin>>n;
  int arr[100000];
 // memset(arr, -1, sizeof(arr));
  fill(arr,arr+n,-1);

  int res_Size=0;
  int carry=0;
  arr[0]=1;

  for(int i=2;i<=n;i++){
    for(int j=0;j<=res_Size;j++){
      int product=arr[j]*i + carry;
      arr[j]=product % 10;
      carry=product/10;
    }
    while(carry!=0){
      arr[++res_Size]=carry%10;
      carry=carry/10;
    }
  }

  for(int i=res_Size;i>=0;i--)
  cout<<arr[i];

  return 0;
}












//find maximum product sub array

#include<bits/stdc++.h>
using namespace std;


void maxProduct_n2(int arr[],int n){
  int result=arr[0];

  for(int i=0;i<n;i++){
    int mul=arr[0];
    for(int j=i+1;j<n;j++){
      result=max(result,mul);
      mul*=arr[j];
    }
    result=max(result,mul);
  }
  cout<<result;
}

void maxProduct_n(int arr[],int n){
  int mx=arr[0];
  int mn=arr[0];
  int pro=arr[0];
  for(int i=1;i<n;i++){
    if(arr[i]<0)
    swap(mx,mn);

    mx=max(arr[i],arr[i]*mx);
    mn=min(arr[i],arr[i]*mn);

    if(mx>pro)
    pro=mx;
  }
  cout<<pro;
}

int main(){
  int n;
  cin>>n;

  int arr[n];
  for(int i=0;i<n;i++)  cin>>arr[i];

 // maxProduct_n2(arr,n);
    maxProduct_n(arr,n);
  return 0;
}













//find the longest consecutive sequence

#include<bits/stdc++.h>
using namespace std;

// this is native approach in which we have to sort the //array so that its complexity is nlogn and addition of //other loop used
int lon_con_Seq(int arr[],int n){
int ans=0;int count =0;
sort(arr,arr+n);

vector<int> v;
v.push_back(arr[0]);

for(int i=1;i<n;i++){
  if(arr[i]!=arr[i-1])
    v.push_back(arr[i]);
}

for(int i=0;i!=v.size();i++){
  if(i>0 && v[i]==v[i-1]+1)
  count++;
  else
  count=1;

  ans=max(ans,count);
}
return ans;
}

//we use set in which O(n) we get our solution 
int Long_cons_seq(int arr[],int n){
  unordered_set<int> s;
  int ans=INT_MIN;

  for(int i=0;i<n;i++)
  s.insert(arr[i]);

  for(int i=0;i<n;i++){
    //finding the 1st in the sequence
    if(s.find(arr[i]-1)==s.end()){
      int j=arr[i];
      while(s.find(j)!=s.end())  j++;

      ans=max(ans,j-arr[i]);
    }
  }
  return ans;
}
int main(){
  int n;
  cin>>n;

  int arr[n];
  for(int i=0;i<n;i++){
    cin>>arr[i];
  }

  // cout<<lon_con_Seq(arr,n);
    cout<<Long_cons_seq(arr,n);
  return 0;
  }
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  //find the minimum element in a rotated and sorted array


#include<bits/stdc++.h>
using namespace std;

void find_min(int arr[],int low,int high){
 

  while(low<high){
    int mid=(low+high)/2;
    if(arr[mid]==arr[high])
    high--;

    else if(arr[mid]>arr[high])
    low=mid+1;

    else
    high=mid;

  }
  cout<<arr[high];
}
int main(){
  int arr[]={5,6,7,2,3,4};
  int n=sizeof(arr)/sizeof(arr[0]);

  find_min(arr,0,n-1);
  return 0;
}
















//given an array of size n and a number k, find all elements that appear more than n/k times

#include<bits/stdc++.h>
using namespace std;

void find_nbyk(int arr[],int n,int k){
  unordered_map<int,int> mp;

  int x=n/k;

  for(int i=0;i<n;i++)
  mp[arr[i]]++;

  for(auto i: mp){
    if(i.second > x)
    cout<<i.first<<" ";
  }
}

int main(){
  int n;
  cin>>n;
  int arr[n];
  for(int i=0;i<n;i++)  cin>>arr[i];

  int k;
  cout<<"Enter k ";
  cin>>k;

  find_nbyk(arr,n,k);

  return 0;
}























//gcd of the given index ranges in an array

#include<bits/stdc++.h>
using namespace std;


//solve this question using segment tree search on gfg

int main(){
  int n;
  cin>>n;

  int arr[n];
  for(int i=0;i<n;i++) cin>>arr[i];

  cout<<"Enter the starting range"<<endl;
  int low;
  cin>>low;
  cout<<"Enter the ending range"<<endl;
  int high;
  cin>>high;

  int temp=arr[low];
  for(int i=low;i<=high;i++){
    temp=__gcd(temp,arr[i]);
  }
  
  cout<<temp;
}


























// maximum profit by buying and selling a share at most twice

#include<bits/stdc++.h>
using namespace std;

int findMaxProfit(int pricelist[],int n){
  int *profit=new int(n);
  for (int i=0; i<n; i++) 
      profit[i] = 0;

  int maxPrice=pricelist[n-1];


  for(int i=n-2;i>=0;i--){
    if(pricelist[i]>maxPrice)
    maxPrice=pricelist[i];

    profit[i]=max(profit[i+1] , maxPrice-pricelist[i]);
  }



  int minPrice=pricelist[0];


  for(int i=1;i<n;i++){
    if(pricelist[i]<minPrice)
    minPrice=pricelist[i];

    profit[i]=max(profit[i-1],profit[i]+(pricelist[i]-minPrice));
  }



  int result=profit[n-1];

  return result;
}

int main(){
  int arr[]={2,30,15,10,8,25,80};
  int n=sizeof(arr)/sizeof(arr[0]);

  cout<<"Max Profit "<<findMaxProfit(arr,n);

  return 0;
}












//minimize the maximum difference betweent the heights

#include<bits/stdc++.h>
using namespace std;

int minimumdifference(int arr[],int n,int k){
  vector<pair<int,int>> v;
  vector<int> visited(n);

  for(int i=0;i<n;i++)
  { 
    if(arr[i]-k>=0)
      v.push_back({arr[i]-k,i});
  
    v.push_back({arr[i]+k,i});
  }

  sort(v.begin(),v.end());

  int ele=0;
  int left=0;
  int right=0;

  while(ele < n && right<v.size()){
    if(visited[v[right].second]==0)
      ele++;

    visited[v[right].second]++;
    right++;
  }

  int ans=v[right - 1].first -v[left].first;

  while(right<v.size()){
    if(visited[v[left].second]==1)
      ele--;

    visited[v[left].second]--;
    left++;

    while(ele<n && right<v.size()){
      if(visited[v[right].second]==0)
        ele++;

      visited[v[right].second]++;
      right++;
    }

    if(ele==n)
      ans=min(ans,v[right].first-v[left].first);
    else 
    break;

  }
  return ans;
}
int main(){


 int arr[]={1,5,8,10};
 int n;
 n=sizeof(arr)/sizeof(arr[0]);
 cout<<"enter k ";
 int k;
 cin>>k;
 cout<<minimumdifference(arr,n,k);
}














//minimum no of jumps to reach the end

#include<bits/stdc++.h>
using namespace std;

//complexity- n^2 
void dpminimumjump(int arr[],int n){
int dp[n];

for(int i=0;i<n;i++) dp[i]=INT_MAX;
dp[0]=0;

for(int i=1;i<n;i++){
  for(int j=0;j<i;j++){
    if(dp[j]!=INT_MAX && arr[j]+j>=i){
      if(dp[j]+1<dp[i]){
        dp[i]=dp[j]+1;
      }
    }
  }
}
if(dp[n-1]!=INT_MAX)
  cout<<dp[n-1];
else 
  cout<<"-1";
}

//this is order n only
int minimumjump(int arr[],int n){
  int maxr=arr[0];
  int step=arr[0];
  int jump=1;

  if(n==0) return 1;

  else if(arr[0]==0) return -1;

  else{
    for(int i=1;i<n;i++){
      if(i==n-1) return jump;

      maxr=max(maxr,i+arr[i]);
      step--;
    
    if(step==0){ jump++;
        if(i>=maxr) return -1;

      step=maxr-i;
    }

    }

  }
return jump;

}
int main(){
  int n;
  cin>>n;
  int arr[n];
  for(int i=0;i<n;i++) cin>>arr[i];

 // dpminimumjump(arr,n);
 cout<<minimumjump(arr,n);

  return 0;
  
}













//find the two repetitive elements in a given array

#include<bits/stdc++.h>
using namespace std;

int main(){
  int n;
  cin>>n;
  int arr[n];
  for(int i=0;i<n;i++) cin>>arr[i];
  //int maxele=*max_element(arr,arr+n);
  int h[100];

  for(int i=0;i<n;i++){
    h[arr[i]]++;
  
    if(h[arr[i]]==2)
    cout<<arr[i]<<" ";

  }
  return 0;
}

















//finding he triplet that sum to a given value

#include<bits/stdc++.h>
using namespace std;

void findingtriplet(int arr[], int n,int sum){
  for(int i=0;i<n;i++){
    unordered_set<int> s;

    int current_sum=sum-arr[i];
    for(int j=i+1;j<n;j++)
      {
        if(s.find(current_sum-arr[j])!=s.end())
          {
            cout<<arr[i]<<arr[j]<<current_sum-arr[j];
          }
          s.insert(arr[j]);
      }
  } 
}
int main(){
  int n;
  cin>>n;
  int *arr=new int(n);

  for(int i=0;i<n;i++) cin>>arr[i];

  cout<<"Enter sum ";
  int sum;
  cin>>sum;
  findingtriplet(arr,n,sum);
}















//find the row withmaximum no of 1's
//array is in sorted order

#include<bits/stdc++.h>
using namespace std;

int main(){
  int arr[1000][1000];
  int n,m;
  cout<<"Enter m,n "<<endl;
  cin>>n>>m;

  
  cout<<"enter elements"<<endl;
  for(int i=0;i<n;i++){
    for(int j=0;j<m;j++){
      cin>>arr[i][j];
    }
  }

  int i,j;
  for( j=0;j<m;j++)
    for(i=0;i<n;i++)
      if(arr[i][j]==1)
      goto x;

  x:cout<<i;

}














//find the median in a row wise sorted matrix

#include<bits/stdc++.h>
using namespace std;

const int MAX =100;
int binaryMedian(int arr[][MAX],int r,int c){
  int min=INT_MAX;
  int max=INT_MIN;
  for(int i=0;i<r;i++){
    //finding minimum element
    if(arr[i][0]<min)
    min=arr[i][0];

    //finding maximum element
    if(arr[i][c-1]>max)
    max=arr[i][c-1];
  }

  int desired=(r*c+1)/2; //median formula
  while(min<max){ //jb tk min value max value se jyada nahi ho jyata tb tk chalega
  int mid=min+(max-min)/2;
  int place=0;
  for(int i=0;i<r;i++){
    place+=upper_bound(arr[i],arr[i]+c,mid)-arr[i];
  }
  if(place<desired)
    min=mid+1;

  else
  max=mid;

  }
return min;
}
int main(){
  int r,c;
  cin>>r>>c;
  int arr[r][MAX];
  for(int i=0;i<r;i++)
    for(int j=0;j<c;j++)
      cin>>arr[i][j];

  cout<<binaryMedian(arr,r,c);
}






















//print the matrix in spiral manner

#include<bits/stdc++.h>
using namespace std;

#define R 3
#define C 6
void spiralPrint(int arr[R][C],int r,int c){
  int i,k=0,l=0;
  /*k is starting row index
    l is starting column index
    r is ending row index
    c is ending column index*/

  while(k<r && l<c){
    for(i=l;i<c;i++){
    cout<<arr[k][i]<<" ";
    }
    k++;

    for(i=k;i<r;i++){
      cout<<arr[i][c-1]<<" ";
    }
    c--;

    if(k<r){
      for(i=c-1;i>=l;i--){
        cout<<arr[r-1][i]<<" ";
      }
      r--;
    }

  if(l<c){
    for(i=r-1;i>=k;i--){
      cout<<arr[i][l]<<" ";
    }
    l++;
  }
}
}

int main(){
  int n,m;
  cin>>n>>m;

  int arr[R][C];
  for(int i=0;i<n;i++){
    for(int j=0;j<m;j++)
      cin>>arr[i][j];
    
  }


  spiralPrint(arr,n,m);
  return 0;
}














//find whether an array is a subset of another array

#include<bits/stdc++.h>
using namespace std;

bool isSubset(int arr1[], int m,int arr2[], int n){
  map<int ,int> frequency;

  for(int i=0;i<m;i++)
    frequency[arr1[i]]++;

  for(int i=0;i<n;i++){
    if(frequency[arr2[i]]>0)
      frequency[arr2[i]]--;
    
    else 
      return false;
  }
  return true;
}

int main(){
  int m,n;
  cin>>m>>n;

  int arr1[m];
  int arr2[n];
  for(int i=0;i<m;i++) cin>>arr1[i];

  for(int i=0;i<n;i++) cin>>arr2[i];

  if(isSubset(arr1,m,arr2,n))
      cout<<"arr2 is a subset of array 1";

  else
      cout<<"arr2 is not a subset of array 1";

  return 0;
}













//implement two stack in an array

#include<bits/stdc++.h>
using namespace std;

class twostacks{
  int *arr;
  int size;
  int top1,top2;

  public:
    twostacks(int n){
      size=n;
      arr=new int(n);
      top1=-1;
      top2=size;
    }

    void push1(int x){
      if(top1<top2-1){
        top1++;
        arr[top1]=x;
      }
      else{
        cout<<"stack overflow"<<endl;
        exit(1);
      }
    }
    void push2(int x){
      if(top1<top2-1){
        top2--;
        arr[top2]=x;
      }
      else{
        cout<<"stack Overflow"<<endl;
        exit(1);
      }
    }

    int pop1(){
      if(top1>=0){
        int x=arr[top1];
        top1--;
        return x;
      }
      else{
        cout<<"stack Underflow"<<endl;
        exit(1);
      }
    }
    int pop2(){
      if(top2<size){
        int x=arr[top2];
        top2++;
        return x;
      }
      else{
        cout<<"stack underflow"<<endl;
        exit(1);
      }
    }

};
int main(){
  twostacks ts(5);
  ts.push1(5);
  ts.push2(10);
  ts.push2(15);
  ts.push1(11);
  ts.push2(7);

  cout<<"stack 1 pop element is "<<ts.pop1();
  cout<<"stack 2 pop element is "<<ts.pop2();

}




















-----------------------------XXXXXXXXXXXXXXXXX ------------------------------------------XXXXXXXXXXXXX--------------------------------------------------------------------------


All programs done
























