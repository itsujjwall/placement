//find the union and intersection of two sorted array

#include<bits/stdc++.h>
using namespace std;

void findunion(int arr1[],int arr2[],int m,int n ){
  int i=0,j=0;

    while(i<m && j<n){
      if(arr1[i]<arr2[j])
        cout<<arr1[i++]<<" ";

      else if(arr2[j]<arr1[i])
        cout<<arr2[j++]<<" ";
      else{
      cout<<arr1[i++]<<" ";
      j++;
      }

    }

    while(i<m)
    cout<<arr1[i++]<<" ";

    while(j<n)
    cout<<arr2[j++]<<" " ;
}

void findinsertion(int arr1[],int arr2[], int m, int n){
  int i=0,j=0;
  while(i<m && j<n){
    if(arr1[i]<arr2[j])
      i++;
    else if(arr2[j]<arr1[i])
      j++;
    else{
      cout<<arr1[i++];
      j++;
    }
  }
}

int main(){
   int m,n;
   cin>>m>>n;
   int *arr1=new int[m];
   int *arr2=new int[n];
   
   cout<<"array 1 elements"<<endl;
   for(int i=0;i<m;i++)
    cin>>arr1[i];

    cout<<"array 2 elements"<<endl;
  for(int i=0;i<n;i++)
    cin>>arr2[i];
  
  sort(arr1,arr1+m);
  // for(int i=0;i<m;i++)
  // cout<<arr1[i];
  sort(arr2,arr2+n);

  cout<<"for union :"<<endl;
  findunion(arr1,arr2,m,n);

  cout<<endl<<"for insertion :"<<endl;
  findinsertion(arr1,arr2,m,n);

  return 0;

}












//program to cyclically rotate an array by one

#include<bits/stdc++.h>
using namespace std;

void rotate(int arr[], int n){
  int temp=arr[n-1];
  for(int i=n-1;i>0;i--)
    arr[i]=arr[i-1];
    arr[0]=temp;

}

int main(){
  int n;
  cin>>n;
  int *arr=new int(n);
  for(int i=0;i<n;i++)
  cin>>arr[i];

  cout << "Given array is \n"; 
    for (int i = 0; i < n; i++) 
        cout << arr[i]; 

  rotate(arr,n);
  
  cout << "\nRotated array is\n"; 
    for (int i = 0; i < n; i++) 
        cout << arr[i];
  return 0;
}













//finding the missing number in an array for a given range

#include<bits/stdc++.h>
using namespace std;

int MissingNo(int arr[],int n){
  int total=(n+1)*(n+2)/2;
  for(int i=0;i<n;i++)
  total-=arr[i];

  return total;
}
int main(){
  int n;
  cin>>n;

  int *arr=new int(n);
  for(int i=0;i<n;i++)
  cin>>arr[i];

  int res=MissingNo(arr,n);
  cout<<res;

  return 0;
}















// find all pairs on integer array whose sum is equal to given no.

#include<bits/stdc++.h>
using namespace std;

 void PrintPairs_n2_method(int arr[],int n,int sum){
   for(int i=0;i<n;i++){
     for(int j=i+1;j<n;j++)
      if(arr[i]+arr[j]==sum)
      cout<<"("<<arr[i]<<","<<arr[j]<<"),"<<endl;
   }
 }

 void PrintPairs_n_hasing(int arr[],int n,int sum){
   int h[sum];
   memset(h,0,sizeof(h));

   for(int i=0;i<n;i++){
     if(h[sum-arr[i]]!=0)
      cout<<"("<<arr[i]<<","<<sum-arr[i]<<"),"<<endl;

      h[arr[i]]++;
   }
 }

 //this function is valid only for sorted array
 void printPairs_n_method3(int arr[],int n,int sum){
   int low=0;
   int high=n-1;
   while(low<high){
     if(arr[low]+arr[high]==sum)
      cout<<"("<<arr[low++]<<","<<arr[high--]<<"),"<<endl;
     
     if(arr[low]+arr[high]>sum)
     high--;
     else
     low++;

   }
 }


int main(){
  int n;
  cin>>n;

  int *arr=new int(n);
  for(int i=0;i<n;i++)
  cin>>arr[i];

  cout<<"Enter the sum  ";
  int sum;
  cin>>sum;

  // PrintPairs_n2_method(arr,n,sum);
  // PrintPairs_n_hasing(arr,n,sum);
  // printPairs_n_method3(arr,n,sum);
}











//find duplicates in an array

//different compiler pe run kro
#include<bits/stdc++.h>
using namespace std;

void find_duplicates(int arr[],int n){
  int h[100];
  memset(h,0,sizeof(h));
  for(int i=0;i<n;i++){
    h[arr[i]]++;
  }
  for(int i=0;i<n;i++){
    if(h[i]>1)
    cout<<i<<" ";
  }  
}

void print_duplicates(int arr[],int n){
  

  for(int i=0;i<n;i++){
    arr[arr[i]%n]+=n;
  }

  for(int i=0;i<n;i++){
    if(arr[i]/n>1)
    cout<<i<<" ";
  }
}

int main(){
  int n;
  cin>>n;
  int *arr=new int(n);
  for(int i=0;i<n;i++)
  cin>>arr[i];

  // find_duplicates(arr,n);
  print_duplicates(arr,n);

  return 0;
}






//implement quick sort algorithm

#include <bits/stdc++.h>
using namespace std;

//int partition(int *arr,int start,int end) use kr skte ha
int partition(int arr[],int start,int end){
  int pivot=arr[end];
  int partition_index=start;

  for(int i=start;i<end;i++){
    if(arr[i]<=pivot){
      swap(arr[i],arr[partition_index]);
      partition_index++;
    }
  }
  swap(arr[partition_index],arr[end]);

  return partition_index;
}


void quick_Sort(int arr[], int start,int end){
  if(start<end){
    int loc=partition(arr,start,end);

    quick_Sort(arr,start,loc-1);
    quick_Sort(arr,loc+1,end);
  }
}

int main(){
int n;
cin>>n;
 int *arr=new int(n);
 for(int i=0;i<n;i++)  cin>>arr[i];

 quick_Sort(arr,0,n-1);

for(int i=0;i<n;i++)
cout<<arr[i]<<" ";

  return 0;
}







//Finding common elements in three sorted arrays

#include<bits/stdc++.h>
using namespace std;

void findCommon(int arr1[],int arr2[],int arr3[],int n1,int n2,int n3){
  int i=0,j=0,k=0;

  while(i<n1 && j<n2 && k<n3){
    if(arr1[i]==arr2[j] && arr2[j]==arr3[k]){
    cout<<endl<<arr1[i]<<" ";
    i++;j++;k++;
    }
    else if(arr1[i]<arr2[j])
    i++;
    else if(arr2[j]<arr3[k])
    j++;
    else 
    k++;
  }

}

int main()
{
  int n1,n2,n3;
  cin>>n1>>n2>>n3;

  int *arr1=new int[n1];
  int *arr2=new int[n2];
  int *arr3=new int[n3];

  cout<<"enter array 1 elements"<<endl;
  for(int i=0;i<n1;i++) cin>>arr1[i];
  cout<<"enter array 2 elements"<<endl;
  for(int i=0;i<n2;i++) cin>>arr2[i];
  cout<<"enter array 3 elements"<<endl;
  for(int i=0;i<n3;i++) cin>>arr3[i];

  sort(arr1,arr1+n1);
  sort(arr2,arr2+n2);
  sort(arr3,arr3+n3);

  findCommon(arr1,arr2,arr3,n1,n2,n3);

  return 0;
}









//find the first repeating elements in an array of integers

#include<bits/stdc++.h>
using namespace std;
void printFirstRepeating(int arr[],int n){
  int min=-1;
  set<int> myset;

  for(int i=n-1;i>=0;i--){
    if(myset.find(arr[i])!=myset.end())
    min=i;
    else 
    myset.insert(arr[i]);

  }

  if(min !=-1)
  cout<<arr[min];
  else
  cout<<"no duplicates available";
}

int main(){
  int arr[] = {10, 5, 3, 4, 3, 5, 6}; 
  
    int n = sizeof(arr) / sizeof(arr[0]); 

  printFirstRepeating(arr,n);

  return 0;
}











//find the first non repeating elements in a given array of integer

#include<bits/stdc++.h>
using namespace std;

int firstNonRepeating(int arr[],int n){
  unordered_map<int , int> mp;

  for(int i=0;i<n;i++){
    mp[arr[i]]++;
  }

  for(int i=0;i<n;i++){
    if(mp[arr[i]]==1)
        return arr[i];
  }
  return -1; 
}
int main(){
  int arr[]={-1,2,-1,3,2};
  int n=sizeof(arr)/sizeof(arr[0]);

  cout<<firstNonRepeating(arr,n);
}







//given an array wit all distincts elements,find the largest three elements expected time complexity is O(n) and extra space is O(1)

#include<bits/stdc++.h>
using namespace std;

void largest3(int arr[],int n){
  int first,second ,third;

  if(n<3)
  cout<<"Invalid inputs";

  first=second=third=INT_MIN;
  for(int i=0;i<n;i++){

    if(arr[i]>first){
      third=second;
      second=first;
      first=arr[i];
    }

    else if(arr[i]>second){
      third=second;
      second=arr[i];
    }
    else if(arr[i]>third)
    third=arr[i];
  }
  cout<<first<<" "<<second<<" "<<third;
}

int main(){
  int arr[]={10,4,3,50,23,90};
  int n=sizeof(arr)/sizeof(arr[0]);

  largest3(arr,n);
}









//rearrange the array in alternating positive and negative items with O(1) extra space

#include<bits/stdc++.h>
using namespace std;

void rearrange(int arr[],int n){
  int i=0;
  int j=n-1;

  while(i<j){
    while(i<n && arr[i]>0) i++;

    while(j>=0 && arr[j]<0) j--;

    if(i<j)
    swap(arr[i],arr[j]);
  }

  if(i==0 || i==n)
  return;

  int k=0;
  while(k<n && i<n){
    swap(arr[k],arr[i]);
    i++;
    k+=2;
  }
}
int main(){
  int n;
  cin>>n;
  int *arr=new int(n);

  for(int i=0;i<n;i++)  cin>>arr[i];

  rearrange(arr,n);

  for(int i=0;i<n;i++)
  cout<<endl<<arr[i]<<" ";

  return 0;
}








//find if there is any sub array with sum equal to zero

#include<bits/stdc++.h>
using namespace std;

bool subarraySum(int arr[],int n){
  unordered_set<int> sumset;
  int sum=0;
  for(int i=0;i<n;i++){
    sum+=arr[i];

    if(sum==0 || sumset.find(sum)!=sumset.end())
      return true;
    
    sumset.insert(sum);
  }
  return false;
}

int main(){
  int n;
  cin>>n;

  int arr[n];
  for(int i=0;i<n;i++)  cin>>arr[i];

  if(subarraySum(arr,n))
    cout<<"true";
  else
    cout<<"False";

    return 0;
}












//find the largest sum contigious subarray
//Kadenes Algorithm

#include<bits/stdc++.h>
using namespace std;

//n^2 complexity O(1) space complexity , we use prefixsum array in which it adds previous array index values
void solve_n2(int arr[],int n){
  int pre[n+1];
  pre[0]=0;
  for(int i=1;i<=n;i++)
  pre[i]=pre[i-1]+arr[i];

  int mx=INT_MIN;
  for(int i=1;i<=n;i++){
    for(int j=i;j<=n;j++){
      int sum=pre[j]-pre[i-1];

      if(sum>mx)
      mx=sum;
    }
  }
  cout<<mx;
}


//time complexity O(n) space O(1) Kadane's Algorithm
void kadane_alo(int arr[],int n){
  int max=INT_MIN;
  int max_Till_Here=0;

  for(int i=1;i<=n;i++){
    max_Till_Here+=arr[i];

    if(max<max_Till_Here)
    max=max_Till_Here;

    if(max_Till_Here<0)
    max_Till_Here=0;
  }
  cout<<max;
}


int main(){
  int n;
  cin>>n;
  int arr[n+1];

  for(int i=1;i<=n;i++)  cin>>arr[i];

  //solve_n2(arr,n);
  kadane_alo(arr,n);

  return 0;
}








//find a factorial of a large number

#include<bits/stdc++.h>
using namespace std;

int main(){
  int n;
  cin>>n;
  int arr[100000];
 // memset(arr, -1, sizeof(arr));
  fill(arr,arr+n,-1);

  int res_Size=0;
  int carry=0;
  arr[0]=1;

  for(int i=2;i<=n;i++){
    for(int j=0;j<=res_Size;j++){
      int product=arr[j]*i + carry;
      arr[j]=product % 10;
      carry=product/10;
    }
    while(carry!=0){
      arr[++res_Size]=carry%10;
      carry=carry/10;
    }
  }

  for(int i=res_Size;i>=0;i--)
  cout<<arr[i];

  return 0;
}












//find maximum product sub array

#include<bits/stdc++.h>
using namespace std;


void maxProduct_n2(int arr[],int n){
  int result=arr[0];

  for(int i=0;i<n;i++){
    int mul=arr[0];
    for(int j=i+1;j<n;j++){
      result=max(result,mul);
      mul*=arr[j];
    }
    result=max(result,mul);
  }
  cout<<result;
}

void maxProduct_n(int arr[],int n){
  int mx=arr[0];
  int mn=arr[0];
  int pro=arr[0];
  for(int i=1;i<n;i++){
    if(arr[i]<0)
    swap(mx,mn);

    mx=max(arr[i],arr[i]*mx);
    mn=min(arr[i],arr[i]*mn);

    if(mx>pro)
    pro=mx;
  }
  cout<<pro;
}

int main(){
  int n;
  cin>>n;

  int arr[n];
  for(int i=0;i<n;i++)  cin>>arr[i];

 // maxProduct_n2(arr,n);
    maxProduct_n(arr,n);
  return 0;
}


















